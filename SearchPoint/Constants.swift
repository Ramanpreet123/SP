//
//  Constants.swift
//  SearchPoint
//
//  Created by Mobile Programming on 22/11/23.
//

import Foundation

// MARK: - Constants
struct Constants {
    static let circleViewAlpha: CGFloat = 0.7
    static let rectangleViewAlpha: CGFloat = 0.3
    static let shapeViewAlpha: CGFloat = 0.3
    static let rectangleViewCornerRadius: CGFloat = 10.0
    static let maxColorComponentValue: CGFloat = 255.0
    static let originalScale: CGFloat = 1.0
    static let bgraBytesPerPixel = 4
    static let circleViewIdentifier = "MLKit Circle View"
    static let lineViewIdentifier = "MLKit Line View"
    static let rectangleViewIdentifier = "MLKit Rectangle View"
    static let appVersion = "Ver: UAT 3.0.20"
    static var farmValue : String?
    static var marketName : String?
    static var providerId : Int?
    static var beefPvId : Int?
}



// MARK: - IMAGE NAMES

struct ImageNames {
    static let nextInactiveImg = "next_inactive_grey.png"
    static let nextActiveImg = "next_active.png"
    static let previousInactiveImg = "previous_inactive_grey.png"
    static let previousActiveImg = "previous_active.png"
    static let hidePwdImg = "hidePwd"
    static let showPwdImg = "showPwd"
    static let statusOfflineImg = "status_offline"
    static let statusOnlineSign = "status_online_sign"
    static let radioSelectedBtn = "radioSeletedBtn"
    static let radioBtn = "radioBtn"
    static let checkImg = "check"
    static let unCheckImg = "Uncheck"
    static let emptyImg = "empty"
    static let filledImg = "Filled"
    static let sortingDescImg = "sortingdesc"
    static let sortingImg = "sorting"
    static let incrementalCheckImg = "Incremental_Check"
    static let expandFormImg = "expand_form"
    static let collapseFormImg = "collapse_form"
    static let ocrInactiveImg = "OCR_inative"
    static let forma1Copy2Img = "forma1Copy2"
    static let scanIconActiveImg = "scan_icon_active"
    static let threeDotsInactiveImg = "three_dots_inactive"
    static let noImage = "no_Image"
    static let barnActiveImg = "barn_active"
    static let dollarActiveImg = "dollar_active"
    static let toggleLeftImg = "toggle_left"
    static let toggleRightImg = "toggle_right"
    static let searchIconImg = "search_Icon"
    static let cowImg = "cow"
    static let resultFilterImg = "resultFilter"
    static let inactiveDollarImg = "inactive_dollar"
    static let activeDollarImg = "active_dollar"
    static let inactiveBarnImg = "inactive_barn"
    static let activeBarnImg = "active_barn"
    static let acknowledgeButton1Img = "acknowledge_button1"
    static let imageImg = "Image"
    static let forma1Copy5Img = "forma1Copy5"
    static let forma1Copy8Img = "forma1Copy8"
    static let skipButtonImg = "skip_button"
    static let skip_buttonPTImg = "skip_buttonPT"
}

// MARK: - ALERT MESSSAGES STRINGS AND OTHER STRINGS

struct AlertMessagesStrings {
    static let syncDataLabel = "Syncing data..."
    static let dataConnectionFailed = "Data connection failed,please try login again. If the problem persists, please contact customer service."
    static let submitOrder  = "Submitting E-mail Order. Please wait..."
    static let dataSyncProgress  =  "Data Sync in Progress. Please Wait..."
    static let authFailed  = "Authorization for this user has failed.You will be logged out. Login back to continue."
    static let noResultString  = "No results available for this customer."
    static let syncResultsData  = "Syncing results data..."
    static let inheritEnrollmentText  = "In case of Blockyard Enrollment, data entry mode is disabled."
    static let bluetoothOffText  = "Bluetooth on this device is currently OFF."
    static let alertString = "Alert"
    static let noInternetConnected = "Not connected with internet!"
    static let invalidMailPwd = "Invalid E-Mail or Password"
    static let somethingWromgAlert = "Something went wrong."
    static let loginFirstAlert = "You have to successfully login first before you can enable Touch ID."
    static let configTouchId = "Configure Touch ID first to use this feature."
    static let noTouchID = "Touch ID is Not Available."
    static let enterMail = "Please enter your  E-Mail."
    static let enterPwd = "Please enter your Password."
    static let enterMailPwd = "Please enter your E-mail and Password."
    static let loginFirstAlertFaceId = "You have to successfully login first before you can enable Face ID."
    static let configFaceId = "Configure Face ID first to use this feature."
    static let noFaceId = "Face ID is not available."
    static let completeClearOrder = "Please complete or clear the order before updating the customer."
    static let changeCustomerAlert = "You are offline. You must be online to change the customer."
    static let contactCustomerService = "No customer(s) associated for this user. You will be logged out. Please contact customer service."
    static let noAssociatedProduct = "No associated provider or product found for the customer in the App. You will be logged out."
    static let selectProductGrouping = "Please select a product grouping."
    static let selectProducts = "Please select the product(s)"
    static let changeProductSelection = "Changing product selection will clear all animals and corresponding product selections applied in order. Do you wish to continue? "
    static let removeProductSelection = "Removing product selection will clear all product selections applied in order. Do you wish to continue? "
    static let changeProductGrouping = "Are you sure you want to change the product grouping?"
    static let changeProviderAlert = "Are you sure you want to change the provider?"
    static let cannotDeleteList = "List cannot be deleted as it is currently being used in an order."
    static let deleteListForUsers = "This list will be deleted for all the users associated with this customer. Do you want to continue?"
    static let deleteOnlineList = "List can only be deleted online. You cannot delete the list offline."
    static let selectOneList = "Please select at least one list."
    static let removingOrdersList = "Removing list will remove its animals from the order as well. Do you want to continue?"
    static let dobSmallerthanCurrDate = "Date of birth cannot be greater than current date."
    static let invalidDateFormat = "Invalid date format."
    static let barcodeSelectedStr = "Matched barcode already selected."
    static let enterBarcodeAlert = "Please enter barcode before selecting 'Incremental barcode'."
    static let barcodeMustEndWithNumAlert = "Barcode must be ending with the number to use 'Incremental barcode'."
    static let animalAlreadyUsedStr = "Animal Record cannot be updated as the animal has been used for an order."
    static let pleaseFillFields = "Please fill all fields."
    static let sampleAlreadyExists = "Sample already exists in previous order."
    static let animalAlreadyAdded = "Animal already added in the order."
    static let animalRecordUpdated = "Animal record updated successfully."
    static let animalCannotBeAdded = "Animal cannot be added in order as BVDV product is selected and the animal sample type is other than Allflex (TSU), Allflex (TST) or Caisely (TSU). Do you want to save animal?"
    static let animalRecordUpdatedAdded = "Animal record updated and added in order successfully."
    static let sampleBarcodeNotSame = "SampleBarcode should not be same as OfflicalID"
    static let breedDoesNotExist = "Breed of this animal does not exist for the selected provider."
    static let bullIdDoesNotExist = "Bull ID for this animal does not exist."
    static let animalCannotBeAddedBVDV = "Animal cannot be added in order as BVDV product is selected and the breed of this animal does not contain product for which BVDV is selected. Do you want to save animal?"
    static let animalAlreadyAddedList = "Animal already added in the list."
    static let enterValueInSeries = "Please enter the value in any one of these fields: Series, RGN or RGD."
    static let barcodeAlreadyUsed = "Barcode is already used with an animal."
    static let addOneAnimal = "Please add at least one animal."
    static let animalDataCantLoad = "Animal data cannot be loaded as animal has been saved for different product."
    static let DamYOBSmallerThanYOB = "Dam year of birth cannot be greater than year of birth."
    static let invalidYear = "Invalid year. Length of year must be 4."
    static let SireYOBSmallerThanYOB = "Sire year of birth cannot be greater than year of birth."
    static let nzAngusAssociation = "Only 'NZ Angus Association' is allowed for this product"
    static let animalCantBeAddedAge35 = "Animal cannot be added in order as BVDV product is selected and the age of animal is less than 35 days. Do you want to save animal?"
    static let noActiveBarn = "No active barn group exists."
    static let connectToInternetStr = "Please connect to the internet to perform filter on results."
    static let foundMultipleResultsForEarTag = "We found multiple results for this Ear Tag.Please select the result details from the list below."
    static let makeGroupActive = "Are you sure you want to make this group active?"
    static let groupsCanBeMadeOnline = "Group can only be made active online.You cannot update group offline."
    static let fromDateSmallerThanDate = "From date must be smaller than To date."
    static let selectOneBreed = "Please select atleast one breed to continue."
    static let selectIndex = "Please select index to continue."
    static let emailEnteredData = "Do you want to email entered data?"
    static let selectOneCheckBox = "Please select at least one checkbox to submit."
    static let acceptOrderTerms = "Please accept the order terms to proceed."
    static let clearAllOrders = "Are you sure you want to clear all order details?"
    static let pleaseReviewTheCart = "Animal(s) in the cart do not have the barcode, Please review the cart to update the animal record(s)."
    static let noInternetConnection = "You are not connected to internet."
    static let dataDelay48Hours = "Data can be delayed up to 48 hours."
    static let bvdvAppliedToOrder = "BVDV will be applied to the entire order."
    static let bvdvMustBeApplied = "BVDV must be applied to the entire order. The product(s) you selected is not compatible with BVDV as an add-on. Please change the base product or remove animals from order."
    static let pleaseUpdateSampleType = "animals have the Sample Type other than Allflex (TSU), Allflex (TST) or Caisley (TSU) and the sample type is not compatible with BVDV testing. Please update the sample type or click on continue to remove all such animals from the order."
    static let noAssignedProdToCountAnimals = "You have not assigned products to animal(s). Do you want to continue?"
    static let diffBreedForAnimals = "The breed entered for animals is different and doesn't have common products. Do you want to remove all animals from the order to use this feature?"
    static let animalsHavingClarifide = "This product should only be ordered for animals that have already had CLARIFIDE ordered for it."
    static let animalsHavingClarifideAHDB = "This product should only be ordered for animals that have already had CLARIFIDE AHDB ordered for it."
    static let animalsHavingClarifideCDCB = "This product should only be ordered for animals that have already had CLARIFIDE CDCB ordered for it."
    static let bvdvAlreadyAppliedToOrder = "BVDV is already applied to the entire order. The product(s) you are selecting are not compatible with BVDV as an add-on. Please change the base product or remove animals from order."
    static let removeAllAnimalsInConflict = "Are you sure you want to remove all animals in conflict from the order?"
    static let clearedAnimalsInConflict = "All animals in conflict from the order has been cleared successfully"
    static let pleaseSelectProduct = "Please select the product."
    static let downloadingAppHelpImages = "Downloading app help images.Please wait.."
    static let completeOrderStr = "Please complete/clear order in progress to refresh app data."
    static let syncOfflineOrders = "Please sync offline orders first to refresh app data."
    static let forceFullyRefreshData = "Are you sure you want to forcefully refresh app data?"
    static let completeBeforeLoggingOut = "Please complete or clear the order in progress before logging out."
    static let logoutFromTheApp = "Are you sure you want to logout from the app?"
    static let onlineToLogout = "You are offline. You must be online to logout."
    static let noAnimalsAddedStr = "No animals added in the list."
    static let selectListToImport = "Please select list to import."
    static let enterUniqueId = "Please enter Unique id before selecting 'Matched Unique ID/Barcode'."
    static let uniqueIdLengthAlert = "Unique ID length should be 15 or 16 characters."
    static let reviewTheCartToUpdate = "Animal(s) in the list do not have the barcode, Please review the cart to update the animal record(s)."
    static let sampleAlreadyExixts = "Sample already exists in previous order"
    static let animalCannotBeUpdated = "Animal cannot be updated in order as BVDV product is selected and the animal sample type is other than Allflex (TSU) Caisely (TSU). Do you want to save animal?"
    static let animalsDoNotHaveValidUniqueId = "Animal(s) in the cart do not have the valid Unique ID. Please review the cart to update the animal record(s)."
    static let animalsDoNotHaveEarTag = "Animal(s) in the cart do not have the Ear Tag, Please review the cart to update the animal record(s)."
    static let pleaseEnterBarcode = "Please Enter Barcode"
    static let duplicateBarCodeEntry = "Duplicate barcode entry"
    static let sampleBarcodeAlreadyExists = "Sample barcode already exists in previous order"
    static let animalAddedWithSameFarmId = "Animal already added with same Farm ID"
    static let animalAddedWithSameOfficialTag = "Animal already added with same Official tag"
    static let enterSampleCollectors = "Please enter sample collectors."
    static let enterAddressBlock = "Please enter address block."
    static let enterCity = "Please enter city."
    static let enterZipCode = "Please enter zip code."
    static let noAssociatedProviderProd = "No associated provider or product found for the customer in the App."
    static let enterValidationCode = "Please enter your device validation code."
    static let selectPrimaryHerdBreed = "Please select the breed of the herd."
    static let noListImported = "There is no list to be imported. Please create a list first."
    static let prodSelectionCleared = "Product selection will be cleared if you want to import list. Do you want to continue?"
    static let removeAllAnimalsAlert = "Are you sure you want to remove all animals having some missing information from the order?"
    static let matchedPreviousOnFarmId = "The entered information has matched the OnFarmID for a previously saved animal. Select action to proceed."
    static let matchedPreviousOfficialID = "The entered information has matched the OfficialID for a previously saved animal. Select action to proceed."
    static let sireIdCannotBeSame = "The Sire ID cannot be the same as the Official ID or the On Farm ID."
    static let sampleTypeDoesNotExist = "The sampleType of the animal doesn't exists for the selected provider. This animal cannot be added."
}

// MARK: - LOCALIZED STRINGS

struct LocalizedStrings {
    static let burkinaFasoBreedId = "1f263617-923b-450f-825b-1489bfb42d7f"
    static let removedCharFromString = "\n\t\r(),.-[]:}{/"
    static let animalBarcodeTagContainsValue = " animalbarCodeTag contains[cd] %@ || productName contains[cd] %@"
    static let productNameContainsValue = "animalTag contains[cd] %@ || productName contains[cd] %@"
    static let cancelPressed = "Cancel Pressed"
    static let bluetoothPairedSuccessfully = "Bluetooth device paired successfully."
    static let actionsRequiredText = "Actions Required"
    static let contactSupportText = "Contact Support"
    static let dashboardText = "Dashboard"
    static let dataEntryModeText = "Data Entry Mode"
    static let addOrderingAnimalsText = "Place an Order: Ordering Add Animal(s) Dairy"
    static let addOrderingAnimalsTextBeef = "Place an Order: Ordering Add Animal(s) Beef"
    static let orderingDefaultsText = "Place an Order: Ordering Defaults"
    static let resultsText = "Results"
    static let trackSamplesText = "Track Samples"
    static let menuText = "Menu"
    static let onFarmIdText = "On-Farm ID"
    static let findMyAnimalText = "Find My Animal"
    static let clearAllText = "Clear All"
    static let settingsText = "Settings"
    static let appHelpText = "App Help"
    static let touchFingPrint = "Touch the finger print sensor."
    static let loadStr = "Loading..."
    static let facePrintStr = "Face print sensor."
    static let enterValidateCode = "Please enter the validation code received in the registered email."
    static let validateDevice = "Validate Device"
    static let resendCode = "Resend validation code"
    static let checkSpamFolder = "Check your spam/trash folder for device validation email."
    static let updateStr = "Update"
    static let orderCollectorStr = "Order Collectors"
    static let orderSampleCollectors  = "Order for sample collectors has been submitted successfully."
    static let doneStr = "Done"
    static let selectProductStr = "Select Product(s)"
    static let customerTextStr = "Customer:"
    static let sessionExpiredStr = "Session_Expired"
    static let selectProductLocalStr = "Please select the product(s)."
    static let statusCodeText = "statusCode"
    static let inheritConnectString = "INHERIT select will provide EPDs for replacement heifers. INHERIT connect allows for bulls to be included into the evaluation for heifer sire verification. EPDs are not provided for INHERIT connect."
    static let appURL = "https://itunes.apple.com/us/app/searchpoint-mobile/id1524736062"
    static let newVersionAvailable = "A newer version of the app is available on App Store. Please update your app now to proceed."
    static let noEvalProvider = "No associated evaluation provider found for this customer in the app."
    static let noAssociatedProductStr = "No associated product found for this customer in the app."
    static let keyBoardCloseWhileScroll = "When enabled, keyboard will be persisted while screen scrolling and when disabled, keyboard will close while scrolling the screen."
    static let uniqueMetalEarTag = "Official ID can be an Official RFID Tag, Unique Metal Ear Tag, Breed Registration#."
    static let herdManagement = "On-Farm ID can be the Herd Management #."
    static let geneticEvaluationBody = "This is the genetic evaluation body that will provide your genomic test results. This will be selected by default based upon your market, but may be switched if required to order an evaluation from a different provider. There are restrictions on being able to change this setting."
    static let productGroupings = "Product Groupings"
    static let providerMarkets = "Evaluation Provider/Market"
    static let manualEntry = "Manual Entry"
    static let datePickerText = "Date Picker"
    static let dateBirthInput = "Date of Birth Input Mode"
    static let mobileCameraOCR = "Mobile camera (OCR)"
    static let alphaNumericText = "Alphanumeric"
    static let rfidScannerText = "RFID Scanner"
    static let selectKeyboard = "Select keyboard for On-Farm ID"
    static let sampleTagsText = "Sample Tags"
    static let selectScannerTypeText = "Select Scanner Type"
    static let focusedDataEntryMode = "Data Entry Mode is a focussed mode that allows you to associate an animal ID to a barcode and then email it to yourself to complete an order later."
    static let dataEntryModeHelp = "Data Entry Mode - Help"
    static let acknowledge = "Acknowledge"
    static let previousAnimalData = "Animal data previously provided will be added in the email output."
    static let sampleBarcodeCollector = "For the best experience, use a device that can scan an ID (RFID or Mobile Camera (OCR)) and a sample barcode collector."
    static let createNewList = "Create New List"
    static let enterNewList = "Enter List Name"
    static let enterListDesc = "Enter List Description"
    static let backBtnText = "Back"
    static let authorizationHeader = "Authorization"
    static let contentType = "Content-Type"
    static let formURLEncoded = "application/x-www-form-urlencoded"
    static let acceptText = "Accept"
    static let appJson = "application/json"
    static let enterListName = "Please enter a list name."
    static let listNameExists = "List name already exist."
    static let listCreated = "List created successfully."
    static let dataEntryModeList = "Data Entry Mode - List"
    static let noListsAvailable = "No lists available for this customer."
    static let mergeList = "Merge List"
    static let listDeleted = "List Deleted successfully."
    static let listSyncProgress = "List Sync in Progress."
    static let emailList = "Please connect to the internet to email the list."
    static let receiveDataInEmail = "You will receive an email with the data you entered in the app. You can copy paste this data into an order form."
    static let selectList = "Select list from below"
    static let importLists = "Imported list(s)"
    static let removeAllStr = "Remove All"
    static let totalAnimalsAdded = "Total Animals Added :"
    static let saveList = "Save List"
    static let officialIDText = "Official ID"
    static let noDataFound = "No data found."
    static let noEmailSent = "You are not connected to the internet. Email will not be sent."
    static let listSaveSuccessfully = "List saved successfully."
    static let orderSubmittedUnsuccessful = "Order submitted to Blockyard was unsuccessful. Please reference CSV file emailed to you for manual upload into Blockyard Web."
    static let referenceCSVFile = "Blockyard user not found. Please contact Customer support and reference CSV file emailed to you for manual upload."
    static let logIntoBlockyard = "Order from Blockyard was unsuccessful. Please log into blockyard and check account settings for a connected Zoetis Genetics account."
    static let orderRequestNodata = "Order request has no data."
    static let bloackYardOrderUnsuccessful = "Order submitted to Blockyard was unsuccessful."
    static let correctFormatStr = "Correct Format"
    static let greaterThenDateStr = "GreaterThenDate"
    static let invalidFormatStr = "invalid format"
    static let girolandoAssociationStr = "Girolando Association"
    static let acceptableChrString = "+?%ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\("")"
    static let collapseFormStr = "Collapse Form"
    static let expandFormStr = "Expand Form"
    static let animalAddedSuccessfully = "Animal added successfully in order."
    static let animalAdded = "Animal added successfully."
    static let unableToReadValue = "Unable to read Value from tag. Please try again. Scanned Result"
    static let useScannedValue = "Use scanned value anyways"
    static let wantToResetForm = "Are you sure you want to reset form?"
    static let animalTagStr = "Animal Tag"
    static let RGNText = "RGN"
    static let RGDText = "RGD"
    static let RGDorAnimalIDText = "RGD or Animal ID"
    static let seriesText = "Series"
    static let tatuagemAnimal = "Tatuagem Animal"
    static let animalTagTattoo = "Animal Tag/Tattoo"
    static let againClick = "againClick"
    static let usaCountryCode = "USA"
    static let eightFortyCountryCode = "840"
    static let multipleBirthStr = "Multiple Birth"
    static let singlesText = "Single(s)"
    static let splitEmbryoStr = "Split Embryo"
    static let cloneText = "Clone"
    static let internalStr = "Internal"
    static let herdbookNumberRequired = "Herdbook number required for all registered animals for all test requests. Herdbook or RFID required field for CLARIFIDE CDCB (US) orders."
    static let dataGeneWebsiteLink = "Complete Bull Names and associated IDs can be found on the DataGene website (www.datagene.com.au)"
    static let hairString = "Hair"
    static let cannotCopyOfficialId = "Can't copy Official ID to barcode - Official ID is not an 840 number."
    static let barcodeAlreadySelected = "Barcode already selected."
    static let invalidNaabCode = "Invalid NAAB Code. Invalid NAAB Bull Code."
    static let invalidAnimalId = "Invalid Animal Id. Invalid Breed Code."
    static let invalidRFIDId = "Invalid Animal ID. Invalid Animal RFID."
    static let invalidInput = "Invalid Input."
    static let invalidCodeStr = "Invalid Animal ID. Invalid Code."
    static let invalidAnimalD17Code = "Invalid Animal ID. Invalid animID17 code."
    static let invalidBreedCode = "Invalid NAAB code. Invalid Breed Code."
    static let noNaabCode = "Naab code not associated."
    static let naabCodeNotFound = "NAAB Code not found in the database."
    static let invalidCountryCode = "Invalid Animal ID. Invalid Country Code."
    static let invalidRangeStr = "Invalid range"
    static let invalidAnim840 = "Invalid Animal id. Invalid Anim840."
    static let invalidGenderCode = "Invalid Animal ID. Invalid Gender Code."
    static let invalidAnimUSA = "Invalid Animal ID. Invalid AnimUSA."
    static let invalidChileanId = "Invalid Animal ID. Invalid Chilean ID."
    static let invalidArgentinaId = "Invalid Animal ID. Invalid Argentina ID."
    static let invalidAnimalRFIDId = "Invalid Animal id. Animalrfid invalid."
    static let invalidNZId = "Invalid Animal ID. Invalid Newzland ID."
    static let invalidAusId = "Invalid Animal ID. Invalid Australian National ID."
    static let singleText = "Single"
    static let selectedDiffBreed = "You are trying to select a breed which is different from the Official ID. Do you want to proceed?"
    static let changeBreedClearProduct = "Changing breed will clear product selection for this animal in order. Do you want to continue?"
    static let abcdAcceptableStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    static let pleaseAddCountry = "Please Add valid Country Code at the beginning"
    static let duplicateEntryStr = "Duplicate Entry."
    static let invalidAnimalIDStr = "Invalid Animal Id."
    static let invalidItalyId = "Invalid Animal ID. Invalid Italy National ID."
    static let animalRecordUpdatedInList = "Animal record updated and added in list successfully."
    static let animalAddedSuccessfullyList = "Animal added successfully in list."
    static let animalIDValidated = "Animal ID validated"
    static let noAnimalAdded = "No animals added in order."
    static let clearTheListStr = "Are you sure you want to clear the list? Clicking YES will delete the list as well."
    static let deleteLastAnimalStr = "Are you sure you want to delete the last animal? Clicking YES will delete the list as well along with the last animal."
    static let removeAnimalStr = "Are you sure you want to remove animal from the list?"
    static let animalRemovedStr = "Animal removed from the list successfully"
    static let selectPrimaryBreed = "Select Primary Breed Genotype"
    static let selectSecondaryBreed = "Select Secondary Breed Genotype"
    static let selectTertiaryBreed = "Select Tertiary Breed Genotype"
    static let abcdNumberFormat = "+?%ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    static let selectDamReg = "Select Dam Registration Association"
    static let selectSireReg = "Select Sire Registration Association"
    static let selectBreedAssc = "Select Breed Association"
    static let clarifideDataGene = "CLARIFIDE DataGene"
    static let herdity = "Herdity"
    static let clarifideCDCB = "CLARIFIDE CDCB"
    static let newDataToLoad = "newDataToLoad"
    static let en_US_POSIXStr = "en_US_POSIX"
    static let dollerStatus = "doller"
    static let noActiveDoller = "No active dollar group exists."
    static let inactiveStatus = "inactive"
    static let foundMultipleResults = "We have found multiple results for this animal. Which one do you wish to see?"
    static let noNotesAvailable = "No Notes Available"
    static let noImageAvailable = "No Image Available"
    static let resultController = "Result"
    static let dollarGroupType = "Dollar"
    static let activeGroupType = "Active"
    static let barnGroupType = "Barn"
    static let noRecordFound = "No records found."
    static let noResultFoundYet = "The animal you are searching for does not have results yet. The sample might still be in progress, or there may be an action required."
    static let noPhotoSaved = "No photo currently saved"
    static let banStatus = "ban"
    static let alphaNumericFormat = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\("")"
    static let numericFormat = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\("")"

    static let animationEndNoti = "AnimationEnd"
    static let officialCheckId = "Offlicail"
    static let imageSelection = "Image Selection"
    static let pickImageStr = "From where you want to pick this image?"
    static let imageDeleted = "Image Deleted"
    static let notConnectedToInternet = "You are not connected to the internet. Notes cannot be saved."
    static let deletePhoto = "Are you sure you want to delete the photo?"
    static let photoCantBeDeleted = "You are not connected to the internet. Photo cannot be deleted."
    static let capsInactiveStatus = "Inactive"
    static let pleaseEnterGroupName = "Please enter a group name."
    static let groupCantBeCreated = "Group cannot be created as already one active group exists of this group type."
    static let groupCreatedSuccessfully = "Group created successfully."
    static let groupAlreadyExists = "Group cannot be created as group already exist by the same name."
    static let groupWillBeDeleted = "This Group will be deleted for all the users associated with this customer. Do you want to continue?"
    static let groupsDeletedOnline = "Groups can only be deleted online.You cannot delete the group offline."
    static let groupDetailEmailed = "Group details emailed successfully"
    static let connectInternetToMail = "Please connect to the internet to email the group."
    static let groupDeleted = "Group deleted successfully."
    static let visitFollowingWebPage = "For Information on list pricing of products, please visit the following web page. Pricing"
    static let billingContact = "Billing Contact:"
    static let orderCleared = "Order Cleared Successfully"
    static let syncInProgress = "Sync in Progress."
    static let removeAnimalFromOrder = "Are you sure you want to remove the animal from the order?"
    static let removedAnimalSuccessfully = "Animal removed from the order successfully"
    static let receiveEmailWithData = "You will receive an email with the data you entered in the app."
    static let orderStoredDuringOfflineMode = "Ordering will be stored during offline mode. As soon as the device has an internet connection and the app is running with a green status, any pending orders will be sent."
    static let lastTimeActions = "Actions will be as of the last time the app was online."
    static let lastTimeSampleStates = "Order History and Sample States will be as of the last time the app was online."
    static let somethingWentWrong = "Something went wrong."
    static let noActionOrIssues = "No actions or issues right now"
    static let consumerServiceAction = "Show me Contact Consumer Service Actions"
    static let breedSocietyAction = "Show me Contact Breed Society Actions"
    static let actionsToAct = "Show Actions I Can Act Upon"
    static let showFailedSamples = "Show Me Failed Samples"
    static let showAllStr = "Show All"
    static let showParentageCorr = "Show me Parentage Corrections"
    static let showGenomicCorr = "Show me Genomic Corrections"
    static let showMeAllStr = "Show Me All"
    static let orderIdStr = "Order ID"
    static let orderSubmittedText = "Order Submitted"
    static let contactCustomerSupport = "Please contact customer support to make changes to your order."
    static let customerSupportWillContact = "Customer support will contact you in the event there is a problem with your order."
    static let orderConfirmationEmail = "Once the order has passed validation and has been successfully processed,you will recieve an email with an order confirmation."
    static let orderedDateStr = "orderedDate"
    static let dateOrderedStr = "Date Ordered"
    static let noOrdersFound = "No orders found"
    static let clarifidePlusCDCBAddOnId = "CLARIFIDE Plus CDCB"
    static let bvdvAddOnId = "BVDV"
    static let animalsRemovedFromOrder = "animals removed from order."
    static let animalsRemovedForProductSelection = "All animals removed from order."
    static let clearAllProdSelections = "Changing back to \"Apply to Entire Order\" will clear all product selections. Please confirm."
    static let providerClarifidePlusUpgrade = "CLARIFIDE Plus Upgrade"
    static let providerClarifideCDCBUpgrade = "CLARIFIDE CDCB Upgrade"
    static let providerClarifideAHDBUpgrade = "CLARIFIDE AHDB Upgrade"
    static let providerClarifideDataGeneUpgrade = "CLARIFIDE DataGene Upgrade"
    static let providerClarifide = "CLARIFIDE"
    static let providerClarifidePlus = "CLARIFIDE Plus"
    static let clarifideAHDB = "CLARIFIDE AHDB"
    static let clarifideCDCBBrownSwiss = "CLARIFIDE CDCB For Brown Swiss"
    static let clarifideGirolando = "CLARIFIDE Girolando"
    static let sampleTypeDifferences = "Animal in order has sample type other than Allflex (TSU), Allflex (TST) or Caisley (TSU)"
    static let followingProdBundled = "The Following products are bundled with this:"
    static let cdcbSupportedBreeds = "CDCB Supports the following breeds (HO, JE, BS, GU)"
    static let zoetisSupportedBreeds = "\nZoetis Evaluation Supports the following breeds (HO, JE)"
    static let ahdbSupportedBreeds = "AHDB Supports the following breeds (HO, British Friesian, JE, GU, Ayrshire)"
    static let zoetisSupportedBreedsWithoutSpace = "Zoetis Evaluation Supports the following breeds (HO, JE)"
    static let updatingStr = "Updating.."
    static let reportedFilterName = "Reported"
    static let productText = "Product Name"
    static let selectActionToBePerformed = "animal(s) from list already added in the order. Please select action to be performed."
    static let animalsImportedIntoOrder = "Animals imported into the order."
    static let noAnimalsAddedToOrder = "No animals added to the order."
    static let importMyListStr = "Import My List"
    static let pleaseSelectCustomer = "Please select a customer."
    static let validationCodeSent = "Validation code sent on the registered email."
    static let invalidValidationCode = "Invalid validation code."
    static let deviceValidated = "Device successfully validated"
    static let wantToRemoveAnimal = "Are you sure you want to remove animal from the order?"
    static let breedNameX = "X-Breed"
    static let overWriteText = "Overwrite"
    static let retrieveText = "Retrieve"
    static let sireIDShouldBeDiff = "The SireID cannot be the same as the Official ID or the On Farm ID."
    static let animalsMissingInfo = "animal(s) have missing information. Please select action to be performed."
    static let memomeryLowInfo = "Your device is running low on memory. To prevent performance issues or disruptions, please close unused apps or free up storage space."
    static let farmIdRegexAlphanumeric = "^[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\("") !\"#$%&'()*+-./:<=>?@\\[\\\\\\]^_`{|}~].{8}$"
    static let farmIdRegexNumeric = "0123456789"

    static let earTagRegex = "+?%ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!\"#$&'()*-./:<=>@\\[\\\\\\]^_`{|}~].{8}$"
}

// MARK: - DATE FORMATTERS

struct DateFormatters {
    static let ddMMyyyyFormat = "dd/MM/yyyy"
    static let MMddyyyyFormat = "MM/dd/yyyy"
    static let MMddyyyy0000Format = "MM/dd/yyyy 00:00"
    static let MMDDYYYYAllCapsFormat = "MM/DD/YYYY"
    static let DDMMYYYYAllCapsFormat = "DD/MM/YYYY"
    static let yyyyMMddFormat = "yyyy-MM-dd"
    static let MMddyyyyHHmmssFormat = "MM-dd-yyyyHH:mm:ss"
    static let yyyyMMddTHHmmssFormat = "yyyy-MM-dd'T'HH:mm:ss"
    static let ddMMyyyy0000Format = "dd/MM/yyyy 00:00"
}

// MARK: - CORE DATA ENTITIES

struct Entities {
    static let getSpeciesTblEntity =  "GetSpeciesTbl"
    static let getCustomerTblEntity =  "GetCustomer"
    static let customerMarketsTblEntity = "CustomerMarkets"
    static let getBreedsTblEntity = "GetBreedsTbl"
    static let getProductTblEntity =  "GetProductTbl"
    static let getAdonTblEntity =  "GetAdonTbl"
    static let getProviderTblEntity =  "GetProviderTbl"
    static let getSampleTblEntity =  "GetSampleTbl"
    static let ausNaabBullTblEntity =  "AusNaabBull"
    static let getBreedSocietiesTblEntity =  "GetBreedSocieties"
    static let getPriorityBreedingTblEntity =  "GetPriorityBreeding"
    static let getSecondaryBreedingProgramsTblEntity =  "GetSecondaryBreedingPrograms"
    static let evaluationMarketsTblEntity = "EvaluationMarkets"
    static let getNominatorsTblEntity = "GetNominatorsTbl"
    static let getMarketsTblEntity = "GetMarketsTbl"
    static let getBornTypeTblEntity = "GetBornTypes"
    static let getNaabCodeTblEntity = "GetNaabCode"
    static let dataEntryListTblEntity = "DataEntryList"
    static let animalUpdatedTimeEntity = "AnimalUpdatedTime"
    static let animalAddTblEntity = "AnimaladdTbl"
    static let beefAnimalAddTblEntity = "BeefAnimaladdTbl"
    static let resultGroupCreateTblEntity = "ResultGroupCreate"
    static let resultGroupAnimalsTblEntity = "ResultGroupsAnimals"
    static let resultMyherdDataTblEntity = "ResultMyHerdData"
    static let offlineOrderBeefTblEntity = "OfflineOrderBeef"
    static let beefAnimalMasterTblEntity = "BeefAnimalMaster"
    static let productAdonAnimlBeefTblEntity = "ProductAdonAnimlTbLBeef"
    static let subProductBeefTblEntity = "SubProductTblBeef"
    static let getProductBeefTblEntity = "GetProductTblBeef"
    static let selectedQuesTblEntity = "SelectedQuestionaire"
    static let offlineOrderTblEntity = "OfflineOrder"
    static let productAdonAnimalTblEntity = "ProductAdonAnimalTbl"
    static let subProductTblEntity = "SubProductTbl"
    static let resultFilterDataTblEntity = "ResultFilterData"
    static let resultByAnimalTblEntity = "ResultbyAnimal"
    static let imageTblEntity = "ImageEntity"
    static let contactSupportTblEntity = "ContactSupportTbl"
    static let LoginTblEntity = "LoginTbl"
    static let getBillingContactEntity = "GetBillingContact"
    static let customerSettingSaveEntity = "CustomerSettingSave"
    static let mobileVersionTbl = "MobileVersion"
    static let getDataBaseCountTbl = "GetDatabaseCount"
    static let settingTblEntity = "SettingTbl"
    static let dataEntryAnimalAddTbl = "DataEntryAnimaladdTbl"
    static let newMarketNameTblEntity = "NewMarketName"
    static let orderSettingsTblEntity = "OrderSettings"
    static let saveProviderTblEntity = "Saveprovider"
    static let dataEntryBeefAnimalAddTblEntity = "DataEntryBeefAnimaladdTbl"
    static let animalMasterTblEntity = "AnimalMaster"
    static let mergeDataEntryListTblEntity = "MergeDataEntryList"
    static let getTertiaryBreedingProgramsTblEntity = "GetTertiaryBreedingPrograms"
    static let productResponseTblEntity = "ProductResponseTbl"
    static let adOnServerResponseTblEntity = "AdonServerResponse"
    static let productResonseServerTblEntity = "ProductResonseServer"
    static let getCountryCodeTblEntity = "GetCountryCode"
    static let dataEntryOfflineDeletedAnimalTblEntity = "DataEntryOfflineDeletedAnimal"
    static let resultTraitHeaderTblEntity = "ResultTraitHeader"
    static let resultHideIndexTblEntity = "ResultHideIndex"
    static let resultMasterTemplateTblEntity = "ResultMasterTemplate"
    static let resultPageByTraitTblEntity  = "ResultPageByTrait"
    static let resultFIlterDataSaveTblEntity = "ResultFIlterDataSave"
    static let resultMasterPageNumberTblEntity = "ResultMasterPageNumber"
    static let termsHTMLTblEntity = "TermsHtml"
    static let singleTimeToastTblEntity = "SingleTimeToastAction"
    static let getActionRequiredTblEntity = "GetActionRequired"
    static let singleTimeToastSampleTblEntity = "SingleTimeToastsample"
    static let sampleOrdersTblEntity = "SampleOrders"
    static let sampleDetailsTblEntity = "SampleDetails"
    static let sampleTblEntity = "Samples"
    static let sampleStatusTblEntity = "SamplesStatus"
    static let getAutoAnimalListEntity = "AutoAnimalList"
}

// MARK: - LANGUAGES

struct Languages {
    static let englishLang = "English"
    static let portugueseLang = "Portuguese"
    static let italianLang = "Italian"
    static let engIn = "en-IN"
    static let engUS = "en-US"
    static let eng = "en"
    static let ptPT = "pt-PT"
    static let italian = "it"
    static let portuguese = "pt"
}

// MARK: - STORYBOARD
struct StoryboardType {
    static let MainStoryboard = "Main"
}

// MARK: - BUTTON TITLES
struct ButtonTitles {
    static let hellotext = "Hello,"
    static let logOutText = "Logout"
    static let dataRefreshText = "Data Refresh"
    static let fullSiteText = "Full Site"
    static let enterMailText = "Enter E-Mail"
    static let passwordText = "Password"
    static let signInText = "SIGN IN"
    static let custSupportText = "Customer Support"
    static let incrementalBarcodeText = "Incremental Barcode"
    static let dateOfBirthText = "Date of Birth"
    static let selectdateText = "Select Date"
    static let earTagText = "Ear Tag"
    static let enterSampleBarcode = "Scan/Enter Sample Barcode"
    static let enterBreedRegNumber = "Enter Breed Registration Number"
    static let enterAnimalName = "Enter Animal Name"
    static let enterSireRegNumber = "Enter Sire Registration Number"
    static let entireDamRegNumber = "Enter Dam registration number"
    static let addAnotherAnimalText = "Add Another Animal"
    static let appStatusText = "App Status:"
    static let reviewDataText = "Review Data"
    static let addAnimalText = "Add Animal(s)"
    static let girolandoText = "Girolando"
    static let connectedText = "Connected"
    static let allflexTSUText = "Allflex (TSU)"
    static let allflexTSTText = "Allflex (TST)"
    static let caisleyTSUText = "Caisley (TSU)"
    static let sortByText = "Sort By:"
    static let emailEnteredData = "E-mail Me Entered Data"
    static let searchText = "Search"
    static let barcodeText = "Barcode"
    static let matched840Id = "Matched 840 ID/Barcode"
    static let enterOnFarmId = "Enter On-Farm ID"
    static let selectDeviceStr = "select_device"
    static let scanEnterOfficialTag = "Scan/Enter Official Tag #"
    static let addClarifideCDCBUS = "Will CLARIFIDE CDCB (US) products be added to this order?\n"
    static let sireIDNASISBullName = "Sire ID (NASIS Bull Name)"
    static let differentSampleType = "Animal in order has sample type other than Allflex (TSU), Allflex (TST) or Caisley (TSU)."
    static let differentSampleTypeAndAge = "Animal in order has sample type other than Allflex (TSU), Allflex (TST) or Caisley (TSU) and age less than 35 days."
    static let ageLess35Days = "Animal in order has age less than 35 days"
    static let ciadeMelhoramentoText = "Cia de Melhoramento"
    static let ANGText = "ANG"
    static let DamYOBText = "Dam Year of Birth"
    static let SireYOB = "Sire Year of Birth"
    static let insertSampleBarcode = "Scan/Insert sample barcode"
    static let enterDamIDText = "Enter dam ID"
    static let enterSecondaryId = "Enter Secondary ID"
    static let enterEIDText = "Enter EID"
    static let tatuagemAnimalText = "Inserir Etiqueta / Tatuagem Animal"
    static let ANGAngusText = "ANG - Angus"
    static let redBreedText = "Ayrshire/Red Breeds%"
    static let ayrShireText = "Ayrshire%"
    static let genomicSireText = "GenomicSire"
    static let sireText = "Sire"
    static let genomicDamText = "GenomicDam"
    static let damText = "Dam"
    static let genomicallyConfirmed = "Genomically_Confirmed"
    static let mgsText = "MGS"
    static let naabGenomicallyConfirmed = "NAAB Genomically_Confirmed"
    static let mgsNaabText = "MGS NAAB"
    static let totalAnimalsText = "Total Animals"
    static let femaleText = "Female"
    static let maleText = "Male"
    static let recentlySearchedText = "Recently searched animals"
    static let searchByTag = "Search By EarTag"
    static let searchByOfficialId = "Search By Official ID"
    static let myHerdResultText = "My Herd Results"
    static let byAnimalText = "By Animal"
    static let byFilterText = "By Filter"
    static let groupDetailsText = "Group Details"
    static let enterGroupName = "Enter Group Name"
    static let enterGroupDesc = "Enter Group Description"
    static let submitText = "Submit"
    static let myManagementGroupText = "My Management Groups"
    static let lessThanBackText = "< Back"
    static let createGroupText = "Create Group"
    static let providerText = "Provider"
    static let breedText = "Breed"
    static let dateRangeText = "Date Range"
    static let clearFilterText = "Clear Filters"
    static let sexTest = "Sex"
    static let selectIndexText = "Select Index"
    static let multipleBreedsText = "Multiple Breeds"
    static let allText = "All"
    static let groupText = "Group"
    static let orderDefaultsText = "Order Defaults"
    static let editText = "Edit"
    static let nominatorText = "Nominator"
    static let placeAnOrderText = "Place an Order"
    static let agreeToAcceptance = "I agree to the Acceptance and Authorization, Warranty and Indemnification and Data Usage Policies."
    static let blockyardOrder = "Submit Order to Blockyard"
    static let finishOrderEmailToZoetis = "This will email me with the animals, samples and product information I have entered. I can finish the order on my computer and email to Zoetis Genetics."
    static let fieldsForEachAnimal = "Submit is only available if all fields are filled out for each animal submitted."
    static let reviewOrderText = "Review Order"
    static let animalText = "Animal"
    static let productText = "Product"
    static let continueProdSelection = "Continue to Product Selection"
    static let offlineRestrictionText = "Offline Restrictions"
    static let actionRequiredText = "Actions Required"
    static let dateSubmitText = "Date Submitted:"
    static let filter1Text = "Filter 1:"
    static let filter2Text = "Filter 2:"
    static let applyText = "Apply"
    static let notConnectedText = "Not Connected"
    static let packageReceivedText = "Package Received"
    static let sampleCountText = "Sample Count"
    static let sampleTrackingText = "Sample Tracking"
    static let applyToEntireOrder = "Apply to Entire Order"
    static let orderProdSelectiontext = "Ordering Product Selection(s)"
    static let selectBillingContactText = "Select Billing Contact"
    static let bvdvProdSelection = "BVDV product selection cannot be done as: "
    static let bvdvSelectionConflict = "BVDV Selection Conflict"
    static let betaCaseinA2Bundled = "Beta Casein A2 is bundled automatically with this product selection."
    static let closeText = "Close"
    static let addOnProdText = "Add-On Products"
    static let inProgressText = "In Progress"
    static let actionNeededText = "Action Needed"
    static let orderingAddAnimalText = "Ordering Add Animal(s)"
    static let enterVisualIdText = "Enter Visual ID"
    static let enterUniqueIdText = "Enter Unique ID"
    static let selectListText = "Select List"
    static let endDateText = "End Date"
    static let startDateText = "Start Date"
    static let pleaseEnterText = "Please enter"
    static let orderSampleCollectors = "Order Sample Collectors"
    static let sampleCollectorsNeeded = "How many sample collectors do you need?"
    static let pleaseEnterAddress = "Please enter your address"
    static let addressBlockText = "Address Block"
    static let cityText = "City"
    static let zipCodeText = "Zip Code"
    static let selectCustomerText = "Select Customer"
    static let selectBreedHerdText = "Select Breed Herd"
    static let primaryBreedText = "Primary\nBreed"
    static let secondaryBreedText = "Secondary\nBreed"
    static let tertiaryBreedText = "Tertiary\nBreed"
    static let animalListText = "Animal List"
    static let animalsMissingInfo = "List of animals below have missing information:"
    static let uniqueIdText = "Unique ID"
}

// MARK: - CLASS IDENTIFIERS

struct ClassIdentifiers {
    static let loginViewController = "LoginViewController"
    static let myHerdResultsByAnimalViewController = "MyHerdResultsByAnimalViewController"
    static let contactSupportVC = "ContactSupportVC"
    static let sampleTrackingVC = "SampleTrackingVC"
    static let resolveIssuesVC = "ResolveIssuesVC"
    static let resultTypeSelectionViewController = "ResultTypeSelectionViewController"
    static let beefUSAddAnimalVC = "BeefUSAddAnimalVC"
    static let validateDeviceController = "ValidateDeviceController"
    static let terms_ConditionVC1 = "Terms_ConditionVC1"
    static let dashboardVC = "DashboardVC"
    static let appHelpListCell = "AppHelpListCell"
    static let appHelpImagesVC = "AppHelpImagesVC"
    static let textScanVC = "TextScanVC"
    static let sucessAlertVC = "Sucessalert"
    static let offlineViewNib = "OfflinePopUp"
    static let dataEntryModeHelpVC = "DataEntryModeHelpVC"
    static let beefAnimalBrazilVC = "BeefAnimalBrazilVC"
    static let beefAnimalNZVC = "BeefAnimalNZ_VC"
    static let beefAnimalGlobalHD50KVC = "BeefAnimalGlobalHD50KVC"
    static let customersListControllerVC = "CustomersListController"
    static let dataCollectorVC = "DataCollectorVC"
    static let tipPopUpNib = "TipPopUp"
    static let myHerdResultsVC = "MyHerdResultsViewController"
    static let orderingDefaultVC = "OrderingDefaultsVC"
    static let orderingAnimalVC = "OrderingAnimalVC"
    static let orderingAnimalVCGirlando = "OrderingAnimalVCGirlando"
    static let beefProductTVCIdentifier = "beefproducts"
    static let dataEntryModeListVC = "DataEntryModeListVC"
    static let dataEntryModeMergeListVC = "DataEntryModeMergeListVC"
    static let dataEntryModeCreateList = "DataEntryModeCreateList"
    static let dataEntryBeefAnimalNZVC = "DataEntryBeefAnimalNZ_VC"
    static let dataEntryBeefAnimalGlobalHD50KVC = "DataEntryBeefAnimalGlobalHD50KVC"
    static let dataEntryBeefAnimalBrazilVC = "DataEntryBeefAnimalBrazilVC"
    static let dataEntryOrderingAnimalVC = "DataEntryOrderingAnimalVC"
    static let dataEntryOrderingAnimalVCGirlando = "DataEntryOrderingAnimalVCGirlando"
    static let dataEntryViewAnimalVC = "DataEntryViewAnimalController"
    static let dataEntryAnimalIdSelectionCartVC = "DataEntryAnimalIdSelectionCart"
    static let offLineRestrictionVC = "OffLineRestrictionVC"
    static let dataEntryModeReviewDataVC = "DataEntryModeReviewData"
    static let cameraViewControllerVC = "CameraViewController"
    static let dataEntryBeefViewAnimalControllerVC = "DataEntryBeefViewAnimalController"
    static let bornTypeCellIdentifier = "BorntTypeCell"
    static let DataEntryViewConflicedImportListVC = "DataEntryViewConflicedImportList"
    static let beefDataEntryModeReviewDataVC = "BeefDataEntryModeReviewData"
    static let customCellIdentifier = "CustomCell"
    static let customSecondCellIdentifier = "CustomSecondCell"
    static let chooseProviderVC = "ChooseProviderVC"
    static let individualAnimalResultControllerVC = "IndividualAnimalResultController"
    static let myHerdFilterControllerVC = "MyHerdFilterController"
    static let notesPhotosViewControllerVC = "NotesPhotosViewController"
    static let myManagementGroupControllerVC = "MyManagementGroupController"
    static let resultCreateGroupVC = "ResultCreateGroupViewController"
    static let GroupDetailsVC = "GroupDetailsViewController"
    static let myCellIdentifier = "MyCell"
    static let pairedDeviceCellId = "CELL"
    static let reviewOrderItemCellIdentifier = "ReviewOrderItemCell"
    static let reviewOrderCell = "ReviewOrderCell"
    static let billingTableViewCell = "billing"
    static let viewAnimalsControllerVC = "ViewAnimalsController"
    static let confilictOrdersViewControllerVC = "ConfilictOrdersViewController"
    static let orderSaveVC = "OrderSaveViewController"
    static let orderSubmittedVC = "OrderSubmittedVC"
    static let productWiseTermsVC = "ProductWiseTermsController"
    static let reviewOrderVC = "ReviewOrderVC"
    static let opsCollectionViewCell = "OPSCollectionViewCell"
    static let addOnWithTitle = "addOnWithTitle"
    static let addOn = "addOn"
    static let billingCellId = "BillinghCell"
    static let opsTableViewCell = "OPSTableViewCell"
    static let orderProductSelectionReviewVC = "OrderProductSelectionReviewVC"
    static let beefCartCell = "beefcartcell"
    static let beefOrderProductSelectionSecondVC = "BeefOrderProductSelectionSecondVC"
    static let beefOrderProductSelectionReviewVC = "BeefOrderProductSelectionReviewVC"
    static let beefOrderingProductSelectionVC = "BeefOrderingProductSelectionVC"
    static let orderProductSelectionSecondVC = "OrderProductSelectionSecondVC"
    static let orderingProductSelectionVC = "OrderingProductSelectionVC"
    static let tutorialViewId = "TutorailView"
    static let resolveIssuesCellId = "ResolveIssueCell"
    static let reviewAddonsControllerVC = "ReviewAddonsController"
    static let sampleTrackingDetailVC = "SampleTrackingDetailVC"
    static let commanInfoPopUpControllerVC = "CommanInfoPopUpController"
    static let listingTblViewCellId = "StarterCell"
    static let orderProdCellId = "SecondCV"
    static let orderProductSelectionCollectionCell = "orderProductSelection"
    static let appHelpListVC = "AppHelpListVC"
    static let animalMergePopVC = "AnimalMergePopUpVC"
    static let beefViewAnimalVC = "BeefViewAnimalVC"
    static let adhListCellId = "ADHListCell"
    static let adhFilterVC = "ADHFilterVC"
    static let adhFilterBreedCellId = "ADHFilterBreedCell"
    static let customerCellId = "CustomerCell"
    static let addonsCellId = "addonsCell"
    static let questionaireViewCellId = "QuestionaireViewCell"
    static let questionaireHeaderViewNib = "QuestionaireHeaderView"
    static let adhAnimalVC = "ADHAnimalVC"
    static let beefReviewVCScreen = "beefreviewVc"
    static let beefProductSelectionReviewScreen = "beefproductSelectionReview"
    static let inheritQuestionaireControllerVC = "InheritQuestionaireController"
    static let notesCellIdentifier = "notesCell"
}

// MARK: - DEVICE TYPE

struct DeviceType {
    static let iPhone5 = "iPhone 5 or 5S or 5C"
    static let iPhone6 = "iPhone 6/6S/7/8"
    static let iPhone6Plus = "iPhone 6+/6S+/7+/8+"
    static let iPhoneX = "iPhone X"
    static let iPhoneXsMax = "iPhone Xs Max"
    static let iPhoneXr = "iPhone Xr"
    static let unknown = "unknown"
    static let iPhoneXS = "iPhone XS"
    static let iPhone11 = "iPhone 11"
    static let iPhone11Pro = "iPhone 11 Pro"
    static let iPhone11ProMax = "iPhone 11 Pro Max"
    static let iPhone13promax12promax = "iPhone 13promax/12promax"
    static let iPhone1312Mini = "iPhone 13/12 mini"
    static let iPhone13pro12pro = "iPhone 13pro/12pro"
}

// MARK: - CALL SWIPE STRUCT GROUP

struct callSwipeStructGroup {
    var name:[ResultGroupsAnimals]
    var color:UIColor
    var image :UIImage
    var backgroundGroup :UIColor
}

// MARK: - DISPLAY MODEL STRUCT

struct DisplayModel{
    var displayName : String?
    var attrubuteName : String?
}

// MARK: - CALL SWIPE STRUCT

struct callSwipeStruct {
    var name:[ResultMyHerdData]
    var color:UIColor
    var image :UIImage
    var backgroundGroup :UIColor
}

// MARK: - MARKET IDS

struct MarketID {
    static let USMarketId = "15009e40-7e3d-4653-b7bc-2be1f05915df"
    static let BRMarketId = "74568e2f-32f9-4196-b1da-92f5df817518"
    static let NZMarketId = "15009e40-2345-4653-b7bc-2be1f05915df"
    static let AusMarketId = "15009e40-1234-4653-b7bc-2be1f05915df"
    static let ItaMarketId = "59f1c666-de22-490e-ac64-9a635cc2400f"
    static let UKMarketId = "967b004a-1c6e-4d39-a666-c38b6546cd83"
    static let NetherlandMarketId = "1d26e283-4933-43a6-9203-c2a603efd7da"
    static let CanadaMarketId = "c47d9cc2-5e5d-4d6f-9ef2-64941ecf8c6f"
    static let ARMarketId = "15009e40-3456-4653-b7bc-2be1f05915df"
    static let CHMarketId = "7bd58ad4-6fb3-4b9c-89a3-c498019cd69b"
}

// MARK: - SPECIES ID
struct SpeciesID {
    static let dairySpeciesId = "074dc82b-2b82-4ee6-99c6-f9691937394d"
    static let beefSpeciesId =  "151e2230-9a01-4828-a105-d87a92b5be2f"
}

// MARK: - COUNTRY CODES

struct CountryCodes {
    static let canada = "CAN"
    static let australia = "AUS"
    static let chile = "CHL"
    static let argentina = "ARG"
    static let newZealand = "NZL"
    static let italy = "ITA"
    static let netherland = "NL"
    
}

// MARK: - COUNTRY NAMES

struct CountryNames {
    static let unitedKingdom = "United Kingdom"
    static let italy = "Italy"
    static let netherland = "Netherland"
    static let usa = "United States"
    static let brazil = "Brazil"
    static let australia = "Australia"
    static let newZealand = "New Zealand"
    
}


// MARK: - GIGYA API KEYS

struct GigyaAPIKeys {
    static let ukAPIKey = "4_exyopvziJXGNbuqKvYcbzw"
    static let usAPIKey = "4_I38N59hxBqQwKY30RJwy6g"
    static let ausAPIKey = "4_C4hqAZvJCptAjErx_643wA"
    static let ukAPIKeyProd = "4_L--cXvkEWyIjuM9XOIlJrg"
    static let usAPIKeyProd = "4_i0BUr32vWPuNLzU8fArqcg"
    static let ausAPIKeyProd = "4_upnVzQfh44I-NbavSu5yTw"
    
}

// MARK: - LANGUAGE NAMES

struct LanguageNames {
    static let englishUK = "English UK"
    static let englishUSA = "English US"
    static let italian = "Italian"
    static let netherland = "Netherland"
    static let spanish = "Spanish"
    static let portuguese = "Portuguese"
    
}

// MARK: - LANGUAGE CODES

struct LanguageCodes {
    static let ukEnCode = "UK-EN"
    static let usEnCode = "US-EN"
    static let usEsCode = "US-ES"
    static let brEnCode = "BR-EN"
    static let brPtCode = "BR-PT"
    static let nlEnCode = "NL-EN"
    static let nlNlCode = "NL-NL"
    static let itEnCode = "IT-EN"
    static let itItCode = "IT-IT"
    static let auEnCode = "AU-EN"
    static let nzEnCode = "NZ-EN"
    
}

// MARK: - API DOMAINS

struct apiDomains {
    static let usDomain = "us1.gigya.com"
    static let euDomain = "eu1.gigya.com"
    static let auDomain = "au1.gigya.com"
    
}


struct QRData {
    var codeString: String?
}

struct BreedNames {
    static let girlandoBreed = "GO"
}
